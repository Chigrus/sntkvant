import * as jwt from 'jsonwebtoken';
import { keys } from '@lib/env';

export function wrapHandler(handler) {
    return async (req, res, next) => {
        try {
            console.log(new Date().toISOString(), req.method, req.url);
            return await handler(req, res, next);
        } catch (e) {
            console.error('ERROR:', e);
            if (e.stack) {
                console.error(e.stack);
            }
            res.writeHead(500, {
                'Content-Type': 'application/json'
            });
            res.end(JSON.stringify({
                er: e.message || true
            }));
        }
    };
}

export function jwtSign(payload) {
    return new Promise((resolve, reject) => {
        jwt.sign(payload, keys.jwt, {
            expiresIn: 3600 * 60,
        }, (err, token) => {
            if (err) {
                return reject(err);
            }
            resolve(token);
        });
    });
}

export function jwtVerify(token) {
    return new Promise((resolve, reject) => {
        jwt.verify(token, keys.jwt, (err, payload) => {
            if (err) {
                return reject(err);
            }
            resolve(payload);
        });
    });
}

export function sha256(input) {
    const { createHash } = require('crypto');
    const hash = createHash('sha256');
    const promise = new Promise((resolve, reject) => {
        let output = '';
        hash.on('data', chunk => {
            output += Buffer.from(chunk).toString('hex');
        });
        hash.once('error', err => {
            reject(err);
            hash.removeAllListeners('data');
            hash.removeAllListeners('end');
        });
        hash.once('end', () => {
            resolve(output);
            hash.removeAllListeners('data');
            hash.removeAllListeners('error');
        });
    });
    hash.write(input);
    hash.end();
    return promise;
}

const COOKIES_PAIR_RE = /(.*?)=(.*)$/;
export function getCookies(req, defaults = {}) {
    if (!req.headers || !req.headers.cookie) {
        return Object.assign({}, defaults);
    }
    return req.headers.cookie.split(';').reduce((acc, pair) => {
        const parts = pair.match(COOKIES_PAIR_RE);
        if (parts) {
            acc[parts[1].trim()] = (parts[2] || '').trim();
        }
        return acc;
    }, Object.assign({}, defaults));
}
